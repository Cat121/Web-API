{"version":3,"sources":["views/Preferences/index.tsx"],"names":["Settings","_super","_this","apply","this","arguments","changeThemePref","e","data","props","setPref","__WEBPACK_IMPORTED_MODULE_5__types__","theme","value","changeLangPref","lang","changeWIPNoticePref","hideWIPNote","changePluginsNotePref","hidePluginsNote","changeServerSettingsNotePref","hideServerSettingsNote","changeShowServerUsagePref","showServerUsage","__extends","prototype","render","t","__WEBPACK_IMPORTED_MODULE_0_react__","__WEBPACK_IMPORTED_MODULE_3_semantic_ui_react__","basic","fitted","name","columns","stackable","Column","Dropdown","item","selection","placeholder","options","onChange","Radio","toggle","label","checked","__webpack_exports__","Object","__WEBPACK_IMPORTED_MODULE_2_react_redux__","state","preferences","dispatch","key","__WEBPACK_IMPORTED_MODULE_4__actions_preferences__","__WEBPACK_IMPORTED_MODULE_1_react_i18next__"],"mappings":"ogBA2BAA,EAAA,SAAAC,GAAA,SAAAD,IAAA,IAAAE,EAAA,OAAAD,KAAAE,MAAAC,KAAAC,YAAAD,YA+FSF,EAAAI,gBAAkB,SAACC,EAAQC,GAClCN,EAAKO,MAAMC,QAAQC,EAAA,EAAcC,MAAOJ,EAAKK,QAGtCX,EAAAY,eAAiB,SAACP,EAAQC,GACjCN,EAAKO,MAAMC,QAAQC,EAAA,EAAcI,KAAMP,EAAKK,QAGrCX,EAAAc,oBAAsB,WAC7Bd,EAAKO,MAAMC,QAAQC,EAAA,EAAcM,aAAcf,EAAKO,MAAMQ,cAGnDf,EAAAgB,sBAAwB,WAC/BhB,EAAKO,MAAMC,QACVC,EAAA,EAAcQ,iBACbjB,EAAKO,MAAMU,kBAINjB,EAAAkB,6BAA+B,WACtClB,EAAKO,MAAMC,QACVC,EAAA,EAAcU,wBACbnB,EAAKO,MAAMY,yBAINnB,EAAAoB,0BAA4B,WACnCpB,EAAKO,MAAMC,QACVC,EAAA,EAAcY,iBACbrB,EAAKO,MAAMc,oBAGf,OA/HuBC,EAAAxB,EAAAC,GACfD,EAAAyB,UAAAC,OAAP,WACS,IAAAC,EAAAvB,KAAAK,MAAAkB,EAER,OACCC,EAAA,cAACC,EAAA,GAAQC,OAAK,GACbF,EAAA,cAACC,EAAA,EAAM,KACND,EAAA,cAACC,EAAA,GAAKE,QAAM,EAACC,KAAK,4BAGnBJ,EAAA,cAACC,EAAA,GAAKI,QAAS,EAAGC,WAAS,GAC1BN,EAAA,cAACC,EAAA,EAAKM,OAAM,KACXP,EAAA,cAACC,EAAA,EAAO,KACPD,EAAA,cAACC,EAAA,EAAM,KACND,EAAA,cAACC,EAAA,GAAKE,QAAM,EAACC,KAAK,oBAEnBJ,EAAA,cAACC,EAAA,EAAI,KACJD,EAAA,cAACC,EAAA,EAAKO,UACLC,MAAI,EACJC,WAAS,EACTC,YAAaZ,EAAE,eACfa,QAAS7B,EAAA,EACTE,MAAOT,KAAKK,MAAMG,MAClB6B,SAAUrC,KAAKE,qBAMnBsB,EAAA,cAACC,EAAA,EAAKM,OAAM,KACXP,EAAA,cAACC,EAAA,EAAO,KACPD,EAAA,cAACC,EAAA,EAAM,KACND,EAAA,cAACC,EAAA,GAAKE,QAAM,EAACC,KAAK,sBAEnBJ,EAAA,cAACC,EAAA,EAAI,KACJD,EAAA,cAACC,EAAA,EAAKO,UACLC,MAAI,EACJC,WAAS,EACTC,YAAaZ,EAAE,kBACfa,QAAS7B,EAAA,EACTE,MAAOT,KAAKK,MAAMM,KAClB0B,SAAUrC,KAAKU,oBAMnBc,EAAA,cAACC,EAAA,EAAKM,OAAM,KACXP,EAAA,cAACC,EAAA,EAAO,KACPD,EAAA,cAACC,EAAA,EAAM,KACND,EAAA,cAACC,EAAA,GAAKE,QAAM,EAACC,KAAK,qBAEnBJ,EAAA,cAACC,EAAA,EAAI,KACJD,EAAA,cAACC,EAAA,EAAKa,OACLC,QAAM,EACNC,MAAM,+BACNC,QAASzC,KAAKK,MAAMQ,YACpBwB,SAAUrC,KAAKY,sBAEhBY,EAAA,cAACC,EAAA,EAAKa,OACLC,QAAM,EACNC,MAAM,8BACNC,QAASzC,KAAKK,MAAMU,gBACpBsB,SAAUrC,KAAKc,wBAEhBU,EAAA,cAACC,EAAA,EAAKa,OACLC,QAAM,EACNC,MAAM,sCACNC,QAASzC,KAAKK,MAAMY,uBACpBoB,SAAUrC,KAAKgB,kCAMnBQ,EAAA,cAACC,EAAA,EAAKM,OAAM,KACXP,EAAA,cAACC,EAAA,EAAO,KACPD,EAAA,cAACC,EAAA,EAAM,KACND,EAAA,cAACC,EAAA,GAAKE,QAAM,EAACC,KAAK,uBAEnBJ,EAAA,cAACC,EAAA,EAAI,KACJD,EAAA,cAACC,EAAA,EAAKa,OACLC,QAAM,EACNC,MAAM,0BACNC,QAASzC,KAAKK,MAAMc,gBACpBkB,SAAUrC,KAAKkB,kCA0CxBtB,EA/HA,CAAuB4B,EAAA,WAmJRkB,EAAA,QAAAC,OAAAC,EAAA,EAAAD,CAlBS,SAACE,GACxB,OACClC,KAAMkC,EAAMC,YAAYnC,KACxBH,MAAOqC,EAAMC,YAAYtC,MACzBW,gBAAiB0B,EAAMC,YAAY3B,gBACnCN,YAAagC,EAAMC,YAAYjC,YAC/BE,gBAAiB8B,EAAMC,YAAY/B,gBACnCE,uBAAwB4B,EAAMC,YAAY7B,yBAIjB,SAAC8B,GAC3B,OACCzC,QAAS,SAAC0C,EAAoBvC,GAC7B,OAAAsC,EAASJ,OAAAM,EAAA,EAAAN,CAAcK,EAAKvC,OAIhB,CAGbkC,OAAAO,EAAA,EAAAP,CAAgB,cAAhBA,CAA+B/C","file":"static/js/18.f07e3b4d.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport { withTranslation, WithTranslation } from 'react-i18next';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport { Form, Grid, Header, Icon, Segment } from 'semantic-ui-react';\r\n\r\nimport { AppAction } from '../../actions';\r\nimport { setPreference } from '../../actions/preferences';\r\nimport {\r\n\tAppState,\r\n\tLang,\r\n\tlangArray,\r\n\tPreferenceKey,\r\n\tTheme,\r\n\tTHEMES_ARRAY\r\n} from '../../types';\r\n\r\ninterface Props extends WithTranslation {\r\n\tlang: Lang;\r\n\ttheme: Theme;\r\n\tshowServerUsage: boolean;\r\n\thideWIPNote: boolean;\r\n\thidePluginsNote: boolean;\r\n\thideServerSettingsNote: boolean;\r\n\tsetPref: (key: PreferenceKey, value: any) => AppAction;\r\n}\r\n\r\nclass Settings extends React.Component<Props> {\r\n\tpublic render() {\r\n\t\tconst { t } = this.props;\r\n\r\n\t\treturn (\r\n\t\t\t<Segment basic>\r\n\t\t\t\t<Header>\r\n\t\t\t\t\t<Icon fitted name=\"setting\" /> Preferences\r\n\t\t\t\t</Header>\r\n\r\n\t\t\t\t<Grid columns={2} stackable>\r\n\t\t\t\t\t<Grid.Column>\r\n\t\t\t\t\t\t<Segment>\r\n\t\t\t\t\t\t\t<Header>\r\n\t\t\t\t\t\t\t\t<Icon fitted name=\"theme\" /> Theme\r\n\t\t\t\t\t\t\t</Header>\r\n\t\t\t\t\t\t\t<Form>\r\n\t\t\t\t\t\t\t\t<Form.Dropdown\r\n\t\t\t\t\t\t\t\t\titem\r\n\t\t\t\t\t\t\t\t\tselection\r\n\t\t\t\t\t\t\t\t\tplaceholder={t('ChangeTheme')}\r\n\t\t\t\t\t\t\t\t\toptions={THEMES_ARRAY}\r\n\t\t\t\t\t\t\t\t\tvalue={this.props.theme}\r\n\t\t\t\t\t\t\t\t\tonChange={this.changeThemePref}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</Form>\r\n\t\t\t\t\t\t</Segment>\r\n\t\t\t\t\t</Grid.Column>\r\n\r\n\t\t\t\t\t<Grid.Column>\r\n\t\t\t\t\t\t<Segment>\r\n\t\t\t\t\t\t\t<Header>\r\n\t\t\t\t\t\t\t\t<Icon fitted name=\"flag\" /> Language\r\n\t\t\t\t\t\t\t</Header>\r\n\t\t\t\t\t\t\t<Form>\r\n\t\t\t\t\t\t\t\t<Form.Dropdown\r\n\t\t\t\t\t\t\t\t\titem\r\n\t\t\t\t\t\t\t\t\tselection\r\n\t\t\t\t\t\t\t\t\tplaceholder={t('ChangeLanguage')}\r\n\t\t\t\t\t\t\t\t\toptions={langArray}\r\n\t\t\t\t\t\t\t\t\tvalue={this.props.lang}\r\n\t\t\t\t\t\t\t\t\tonChange={this.changeLangPref}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</Form>\r\n\t\t\t\t\t\t</Segment>\r\n\t\t\t\t\t</Grid.Column>\r\n\r\n\t\t\t\t\t<Grid.Column>\r\n\t\t\t\t\t\t<Segment>\r\n\t\t\t\t\t\t\t<Header>\r\n\t\t\t\t\t\t\t\t<Icon fitted name=\"chat\" /> Notices\r\n\t\t\t\t\t\t\t</Header>\r\n\t\t\t\t\t\t\t<Form>\r\n\t\t\t\t\t\t\t\t<Form.Radio\r\n\t\t\t\t\t\t\t\t\ttoggle\r\n\t\t\t\t\t\t\t\t\tlabel=\"Hide WIP notice on dashboard\"\r\n\t\t\t\t\t\t\t\t\tchecked={this.props.hideWIPNote}\r\n\t\t\t\t\t\t\t\t\tonChange={this.changeWIPNoticePref}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t<Form.Radio\r\n\t\t\t\t\t\t\t\t\ttoggle\r\n\t\t\t\t\t\t\t\t\tlabel=\"Hide notice on plugins page\"\r\n\t\t\t\t\t\t\t\t\tchecked={this.props.hidePluginsNote}\r\n\t\t\t\t\t\t\t\t\tonChange={this.changePluginsNotePref}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t<Form.Radio\r\n\t\t\t\t\t\t\t\t\ttoggle\r\n\t\t\t\t\t\t\t\t\tlabel=\"Hide notice on server settings page\"\r\n\t\t\t\t\t\t\t\t\tchecked={this.props.hideServerSettingsNote}\r\n\t\t\t\t\t\t\t\t\tonChange={this.changeServerSettingsNotePref}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</Form>\r\n\t\t\t\t\t\t</Segment>\r\n\t\t\t\t\t</Grid.Column>\r\n\r\n\t\t\t\t\t<Grid.Column>\r\n\t\t\t\t\t\t<Segment>\r\n\t\t\t\t\t\t\t<Header>\r\n\t\t\t\t\t\t\t\t<Icon fitted name=\"settings\" /> Misc.\r\n\t\t\t\t\t\t\t</Header>\r\n\t\t\t\t\t\t\t<Form>\r\n\t\t\t\t\t\t\t\t<Form.Radio\r\n\t\t\t\t\t\t\t\t\ttoggle\r\n\t\t\t\t\t\t\t\t\tlabel=\"Show server usage stats\"\r\n\t\t\t\t\t\t\t\t\tchecked={this.props.showServerUsage}\r\n\t\t\t\t\t\t\t\t\tonChange={this.changeShowServerUsagePref}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</Form>\r\n\t\t\t\t\t\t</Segment>\r\n\t\t\t\t\t</Grid.Column>\r\n\t\t\t\t</Grid>\r\n\t\t\t</Segment>\r\n\t\t);\r\n\t}\r\n\r\n\tprivate changeThemePref = (e: any, data: any) => {\r\n\t\tthis.props.setPref(PreferenceKey.theme, data.value);\r\n\t};\r\n\r\n\tprivate changeLangPref = (e: any, data: any) => {\r\n\t\tthis.props.setPref(PreferenceKey.lang, data.value);\r\n\t};\r\n\r\n\tprivate changeWIPNoticePref = () => {\r\n\t\tthis.props.setPref(PreferenceKey.hideWIPNote, !this.props.hideWIPNote);\r\n\t};\r\n\r\n\tprivate changePluginsNotePref = () => {\r\n\t\tthis.props.setPref(\r\n\t\t\tPreferenceKey.hidePluginsNote,\r\n\t\t\t!this.props.hidePluginsNote\r\n\t\t);\r\n\t};\r\n\r\n\tprivate changeServerSettingsNotePref = () => {\r\n\t\tthis.props.setPref(\r\n\t\t\tPreferenceKey.hideServerSettingsNote,\r\n\t\t\t!this.props.hideServerSettingsNote\r\n\t\t);\r\n\t};\r\n\r\n\tprivate changeShowServerUsagePref = () => {\r\n\t\tthis.props.setPref(\r\n\t\t\tPreferenceKey.showServerUsage,\r\n\t\t\t!this.props.showServerUsage\r\n\t\t);\r\n\t};\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n\treturn {\r\n\t\tlang: state.preferences.lang,\r\n\t\ttheme: state.preferences.theme,\r\n\t\tshowServerUsage: state.preferences.showServerUsage,\r\n\t\thideWIPNote: state.preferences.hideWIPNote,\r\n\t\thidePluginsNote: state.preferences.hidePluginsNote,\r\n\t\thideServerSettingsNote: state.preferences.hideServerSettingsNote\r\n\t};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<AppAction>) => {\r\n\treturn {\r\n\t\tsetPref: (key: PreferenceKey, value: any): AppAction =>\r\n\t\t\tdispatch(setPreference(key, value))\r\n\t};\r\n};\r\n\r\nexport default connect(\r\n\tmapStateToProps,\r\n\tmapDispatchToProps\r\n)(withTranslation('Preferences')(Settings));\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/views/Preferences/index.tsx"],"sourceRoot":""}